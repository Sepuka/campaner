// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/sepuka/campaner/internal/domain"
	mock "github.com/stretchr/testify/mock"

	orm "github.com/go-pg/pg/orm"

	pg "github.com/go-pg/pg"

	time "time"
)

// ReminderRepository is an autogenerated mock type for the ReminderRepository type
type ReminderRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: reminder
func (_m ReminderRepository) Add(reminder *domain.Reminder) error {
	ret := _m.Called(reminder)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Reminder) error); ok {
		r0 = rf(reminder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: _a0
func (_m ReminderRepository) Commit(_a0 *pg.Tx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pg.Tx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindActual provides a mock function with given fields: timestamp
func (_m ReminderRepository) FindActual(timestamp time.Time) ([]domain.Reminder, *pg.Tx, error) {
	ret := _m.Called(timestamp)

	var r0 []domain.Reminder
	if rf, ok := ret.Get(0).(func(time.Time) []domain.Reminder); ok {
		r0 = rf(timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reminder)
		}
	}

	var r1 *pg.Tx
	if rf, ok := ret.Get(1).(func(time.Time) *pg.Tx); ok {
		r1 = rf(timestamp)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pg.Tx)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(time.Time) error); ok {
		r2 = rf(timestamp)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Scheduled provides a mock function with given fields: userId, limit
func (_m ReminderRepository) Scheduled(userId int, limit uint32) ([]domain.Reminder, error) {
	ret := _m.Called(userId, limit)

	var r0 []domain.Reminder
	if rf, ok := ret.Get(0).(func(int, uint32) []domain.Reminder); ok {
		r0 = rf(userId, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Reminder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, uint32) error); ok {
		r1 = rf(userId, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetStatus provides a mock function with given fields: _a0, _a1
func (_m ReminderRepository) SetStatus(_a0 *domain.Reminder, _a1 *pg.Tx) (orm.Result, error) {
	ret := _m.Called(_a0, _a1)

	var r0 orm.Result
	if rf, ok := ret.Get(0).(func(*domain.Reminder, *pg.Tx) orm.Result); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orm.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Reminder, *pg.Tx) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
